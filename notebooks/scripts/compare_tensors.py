from contextlib import suppress
import torch

def compare_tensors(torch_tensor: torch.Tensor, ttnn_tensor: torch.Tensor, max_diff_tolerance=0.02, mean_diff_tolerance=0.02, correlation_tolerance=0.99, suppress_details=False):
    """
    Compare outputs from PyTorch and TTNN implementations with tolerance checks.
    
    Initial code generated by Claude 3.7 Sonnet

    Args:
        torch_tensor: Output from PyTorch implementation as a torch tensor
        ttnn_tensor: Output from TTNN implementation as a torch tensor
        max_diff_tolerance: Maximum acceptable absolute difference (default: 0.02)
        mean_diff_tolerance: Maximum acceptable mean absolute difference (default: 0.01)
        correlation_tolerance: Minimum acceptable correlation (default: 0.99)
    
    Returns:
        Dictionary with comparison results and overall pass/fail status
    """
    # Convert to bfloat16 for comparison
    if torch_tensor.dtype != torch.bfloat16:
        torch_tensor = torch_tensor.to(torch.bfloat16)
    if ttnn_tensor.dtype != torch.bfloat16:
        ttnn_tensor = ttnn_tensor.to(torch.bfloat16)
    
    # Calculate differences
    abs_diff = torch.abs(torch_tensor - ttnn_tensor)
    
    # Calculate statistics
    max_abs_diff = torch.max(abs_diff).item()
    mean_abs_diff = torch.mean(abs_diff).item()
    median_abs_diff = torch.median(abs_diff).item()
    
    # Calculate manual correlation
    torch_flat = torch_tensor.flatten()
    ttnn_flat = ttnn_tensor.flatten()
    torch_mean = torch.mean(torch_flat)
    ttnn_mean = torch.mean(ttnn_flat)
    
    numerator = torch.sum((torch_flat - torch_mean) * (ttnn_flat - ttnn_mean))
    denominator = torch.sqrt(torch.sum((torch_flat - torch_mean)**2)) * torch.sqrt(torch.sum((ttnn_flat - ttnn_mean)**2))
    correlation = (numerator / denominator).item()
    
    # Determine pass/fail status based on tolerances
    max_diff_status = "✅ PASS" if max_abs_diff <= max_diff_tolerance else "❌ FAIL"
    mean_diff_status = "✅ PASS" if mean_abs_diff <= mean_diff_tolerance else "❌ FAIL"
    corr_status = "✅ PASS" if correlation >= correlation_tolerance else "❌ FAIL"
    
    # Overall status - passes if all individual checks pass
    overall_status = "✅ PASS" if all([
        max_abs_diff <= max_diff_tolerance,
        mean_abs_diff <= mean_diff_tolerance,
        correlation >= correlation_tolerance
    ]) else "❌ FAIL"
    
    print(f"\nOverall Status: {overall_status}")
    if not suppress_details:
      # Print results with status indicators
      print("=== Tensor Comparison ===")
      print(f"Shapes: PyTorch {torch_tensor.shape}, TTNN {ttnn_tensor.shape}")
      print(f"Data types: PyTorch {torch_tensor.dtype}, TTNN {ttnn_tensor.dtype}")
      print("\nTolerance Checks:")
      print(f"  Max Absolute Diff: {max_abs_diff:.6f} (Tolerance: {max_diff_tolerance:.6f}) {max_diff_status}")
      print(f"  Mean Absolute Diff: {mean_abs_diff:.6f} (Tolerance: {mean_diff_tolerance:.6f}) {mean_diff_status}")
      print(f"  Correlation: {correlation:.6f} (Tolerance: {correlation_tolerance:.6f}) {corr_status}")
        
      # Print a few sample values for direct comparison
      print("\nSample Value Comparisons (first 3 positions):")

      for i in range(min(3, torch_tensor.shape[0])):
          for j in range(min(3, torch_tensor.shape[1])):
            for k in range(torch_tensor.shape[2]):
              torch_val = torch_tensor[i, j, k].item()
              ttnn_val = ttnn_tensor[i, j, k].item()
              diff = abs(torch_val - ttnn_val)
              diff_status = "✅" if diff <= max_diff_tolerance else "❌"

              if not suppress_details:
                print(f"  Position [{i},{j},{k}]: PyTorch={torch_val:.6f}, TTNN={ttnn_val:.6f}, Diff={diff:.6f} {diff_status}")
    
    return {
        'max_diff': max_abs_diff,
        'mean_diff': mean_abs_diff,
        'correlation': correlation,
        'max_diff_status': max_abs_diff <= max_diff_tolerance,
        'mean_diff_status': mean_abs_diff <= mean_diff_tolerance, 
        'correlation_status': correlation >= correlation_tolerance,
        'overall_status': overall_status == "✅ PASS"
    }

# Example usage:
# torch_output = context_vecs  # Your PyTorch output 
# ttnn_output = context_vec    # Your TTNN output
# 
# # Default tolerances
# results = compare_tensors(torch_output, ttnn_output)
#
# # Custom tolerances
# # results = compare_tensors(torch_output, ttnn_output, 
# #                          max_diff_tolerance=0.05, 
# #                          mean_diff_tolerance=0.02, 
# #                          correlation_tolerance=0.95)
